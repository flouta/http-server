/* this file contains the definition of the CGI class.
 * It gets an input in case of post, runs a CGI script
 *  with a specified executable and writes the output to a file.
 * The input and output files should be set before
 *  the CGI is run.
 * All the other necessary information will be retrieved
 *  from the request object that's passed to its constructor
 */

#pragma once

#include <Request.hpp>
#include <StatusCodeHandler.hpp>

class CGI {

	public:
		/******* alias types *******/
		typedef Request::Method Method;
		typedef StatusCodeHandler::StatusCodeType
			StatusCodeType;

		/******* public member functions *******/
		CGI(const Request& request);

		setInputFilePath(const std::string& path);

		setOutputFilePath(const std::string& path);

		void run();

		// was the cgi run correctly
		bool isValid();

		StatusCodeType getStatusCode();
	
	private:
		/******* private member objects *******/
		// the file path from which the CGI
			// gets its input (request body)
		// if the method is not GET, then there
			// is no input
		std::string mInputFilePath;

		// the filepath where the cgi script
			// will save its output
		std::string mOutputFilePath;

		StatusCodeType mStatusCode;

		/******* private member functions *******/
		// runs the executable as a child process, calls
			// the functions that prepare the script's environment
			// and waits for its termination
		// sets the status code to an error code if
			// an error happens (e.g. couldn't execute)
		void manageExecution();

		// waits for the script to execute for a defined
			// amount of time. if it takes more, then the script
			// times out and status code is set accordingly
		void waitForScript();

		// sets the script to read its input from mInputFilePath
			// in case of POST request Method
			// and to write its output to mOutputFilePath
		// if IO couldn;t be set, status code is set accordinly
		void setScriptIO();

		// finds the executable set in the configured
			// location
		// throws std::runtime_error in case no
			// executable was found
		const std::string& findExecutable();

		// sets the environment variables needed
			// for the CGI to run properly
		void setEnv();

		// gets the content length of the body
			// that is generated by the script
		// throws std::runtime_error in case
			// the content length could'nt be determined
		size_t getContentLength();

};
